const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY
const FROM = process.env.SENDGRID_FROM_EMAIL

export async function sendEmail(to: string, subject: string, text: string, options?: { html?: string; attachments?: { filename: string; content: string; type?: string }[] }) {
  if (!SENDGRID_API_KEY || !FROM) return { skipped: true }
  try {
    const sgMail: any = (await import('@sendgrid/mail')).default
    sgMail.setApiKey(SENDGRID_API_KEY)
    await sgMail.send({
      to,
      from: FROM,
      subject,
      text,
      html: options?.html,
      attachments: options?.attachments
    })
    return { ok: true }
  } catch {
    return { skipped: true }
  }
}

export function buildInvoiceHtml(details: { auctionTitle: string; amount: number; buyerEmail: string; sellerEmail: string; auctionId: string }) {
  return `<!doctype html><html><body style="font-family:Arial,sans-serif">
  <h2>Invoice</h2>
  <p>Auction: <strong>${details.auctionTitle}</strong> (ID: ${details.auctionId})</p>
  <p>Amount: <strong>$${details.amount.toFixed(2)}</strong></p>
  <p>Buyer: ${details.buyerEmail}</p>
  <p>Seller: ${details.sellerEmail}</p>
  <hr/>
  <small>Generated by Auction System</small>
  </body></html>`
}

export async function buildInvoicePdf(details: { auctionTitle: string; amount: number; buyerEmail: string; sellerEmail: string; auctionId: string }): Promise<string> {
  try {
    const PDFDocument: any = (await import('pdfkit')).default
    const doc = new PDFDocument({ size: 'A4', margin: 50 })
    const chunks: any[] = []
    return await new Promise<string>((resolve, reject) => {
      doc.on('data', (chunk: any) => chunks.push(chunk))
      doc.on('end', () => {
        try {
          // @ts-ignore Buffer is global in Node
          const buffer = Buffer.concat(chunks)
          resolve(buffer.toString('base64'))
        } catch (e) {
          reject(e)
        }
      })
      doc.on('error', reject)

      doc.fontSize(22).text('Invoice', { align: 'center' })
      doc.moveDown()
      doc.fontSize(12).text(`Auction: ${details.auctionTitle} (ID: ${details.auctionId})`)
      doc.text(`Amount: $${details.amount.toFixed(2)}`)
      doc.text(`Buyer: ${details.buyerEmail}`)
      doc.text(`Seller: ${details.sellerEmail}`)
      doc.moveDown()
      doc.text('Thank you for using Classic Auctions!')

      doc.end()
    })
  } catch {
    return ''
  }
}
